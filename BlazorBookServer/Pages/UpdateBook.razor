@page "/updateBook/{id:int}"
@using BlazorBookApp.Data;
@using BlazorBookApp.Services.Interfaces;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]
@inject IBookService bookService
@inject IImageService imageService
@inject IFileService fileService;

<div class="container">
    <div class="column">
        <img src="@fileService.GetBlob(newBook.Image)" class="show-big-image" />
    </div>
    <div class="column">
        <EditForm Model="@newBook" OnValidSubmit="@UpdateBookToDb">
            <DataAnnotationsValidator />
            <div class="row bg_1">
                <div class="col-2">
                    <label for="title">Title</label>
                    <br />
                    <InputText id="title" class="effect-1" placeholder="Title" @bind-Value="newBook.Title" />
                    <span class="focus-border"></span>
                </div>
                <div class="col-2">
                    <label for="author">Author</label>
                    <br />
                    <InputText id="author" class="effect-1" placeholder="Author" @bind-Value="newBook.Author" />
                    <span class="focus-border"></span>
                </div>
                <div class="col-1">
                    <label for="descript">Description</label>
                    <br />
                    <InputTextArea id="descript" class="textarea-style" placeholder="Enter description" @bind-Value="newBook.Description" />
                </div>
            </div>
            <ValidationSummary />
            <button class="custom-btn btn-6" type="submit">Submit</button>

        </EditForm>
        <div>
            <span>@result</span>
        </div>
    </div>
</div>

@code {
    private Book newBook = new Book();
    private Book updateBook = new Book();
    private string result = string.Empty;
    string imageDataUrl = string.Empty;
    string fileState = String.Empty;
    IBrowserFile file;


    [Parameter]
    public int Id{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        newBook = await bookService.GetBookByIdAsync(Id);
        updateBook = newBook;
    }

    private async Task UpdateBookToDb()
    {
        newBook = await bookService.UpdateBookAsync(newBook);
        result = $"Updated Title {newBook.Title}";
    }

    private async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        file = e.GetMultipleFiles().First();
        var format = "image/png";
        var resize = await file.RequestImageFileAsync(format, 180, 320);
        var buffer = new byte[resize.Size];
        await resize.OpenReadStream().ReadAsync(buffer);

        imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        this.StateHasChanged();
    }

}
