@page "/book/{Id:int}"
@using BlazorBookApp.Data;
@using BlazorBookApp.Services.Interfaces;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]
@inject IBookService bookService
@inject IFileService fileService;
@inject ICommentService commentService
@inject NavigationManager navigationManager

@if(showBook == null)
{
    <p>Loading....</p>
}
else
{
   
<div class="container">
    <div class="column">
            <img src="@fileService.GetBlob(showBook.Image)" class="show-big-image" />
    </div>
    <div class="column">
         <h1><b>Title Name:</b> </h1>
        <h1>@showBook.Title</h1>
        <h2><b>Author:</b></h2> 
         <h2> @showBook.Author</h2>
        <h5><b>Description</b></h5>
        <p>@showBook.Description</p>
        <h5><b>Rate of the book</b></h5>
        <p>@GetOveralRate()</p>
            <button class="custom-btn btn-6" type="button" @onclick='@(() => @navigationManager.NavigateTo($"/UpdateBook/{@showBook.Id}"))'>Edit</button>

    </div>
    </div>
    <div>
        <div>
        @foreach (var comment in comments)
        {
            <h4>
                <b>Name:</b> @comment.Name
                <b>Rate:</b> @comment.Rate
            </h4>

            <p>
                @comment.Content
            </p>
        }
    </div>
        <EditForm model="@newComment" OnValidSubmit="@AddCommentAsync">
            <DataAnnotationsValidator />
            <div class="row bg_1">
                <div class="col-2">
                    <label for="rate">Rate</label>
                    <InputNumber id="rate" class="effect-1" @bind-Value="@newComment.Rate" />
                </div>
                <div class="col-2">
                    <label for="Name">Name</label>
                    <InputText id="Name" class="effect-1" placeholder="Name" @bind-Value="@newComment.Name" />
                    <span class="focus-border"></span>
                </div>
                <div class="col-1">
                    <label for="content">Content</label>
                    <br>
                    <InputTextArea id="content" class="effect-1" @bind-Value="@newComment.Content" />
                </div>
            </div>
            <ValidationSummary />
            <button class="custom-btn btn-6" type="submit">Submit</button>
        </EditForm>
        @if (showMessage)
        {
            <div>
                @commentState
            </div>
        }
        </div>

}




@code {
    private Book showBook{ get; set; }
    [Parameter]
    public int Id { get; set; } = 0;
    private Comment newComment { get; set; } = new Comment();
    private string commentState = string.Empty;
    bool showMessage = false;

    private List<Comment> comments{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        showBook = await bookService.GetBookByIdAsync(Id);
        comments = await commentService.GetAllCommentsByBookIdAsync(Id);
    }

    private async Task AddCommentAsync()
    {
        newComment.BookId = Id;
        await commentService.AddCommentAsync(newComment);
        comments.Add(newComment);
        showMessage = true;

        commentState = "Comment Added";        
        newComment = new Comment();
        StateHasChanged();
        await Task.Delay(5000);
        showMessage = false;
    }

    private double GetOveralRate()
    {
        return comments.Sum(x => x.Rate) / (comments.Count() != 0 ? comments.Count() : 1);
    }
}
